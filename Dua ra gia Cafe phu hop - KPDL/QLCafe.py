# -*- coding: utf-8 -*-
"""QLCafeTu Tao Hoan chinh

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IvWr00PHBNhH30Tqok8zu9ief-X8SGwc

-------------------
# 1. Đọc các file
"""

import pandas as pd

# Đọc file ChiPhiSPDuKien.csv
try:
    df_chiphi = pd.read_csv('ChiPhiSPDuKien_csv.csv')
    print("Đã đọc file ChiPhiSPDuKien_csv.csv thành công:")
    # print(df_chiphi.head())
except FileNotFoundError:
    print("Không tìm thấy file ChiPhiSPDuKien_csv.csv")

# Đọc file DuLieuBanHang.csv
try:
    df_banhang = pd.read_csv('DuLieuBanHang_csv.csv')
    print("\nĐã đọc file DuLieuBanHang_csv.csv thành công:")
    # print(df_banhang.head())
except FileNotFoundError:
    print("Không tìm thấy file DuLieuBanHang_csv.csv")

# Đọc file GiaBanCua1SoCuaHang.csv
try:
    df_giaban = pd.read_csv('GiaBanCua1SoCuaHang_csv.csv')
    print("\nĐã đọc file GiaBanCua1SoCuaHang_csv.csv thành công:")
    # print(df_giaban.head())
except FileNotFoundError:
    print("Không tìm thấy file GiaBanCua1SoCuaHang_csv.csv")

# Đọc file KyNghi.csv
try:
    df_kynghi = pd.read_csv('KyNghi.csv')
    print("\nĐã đọc file KyNghi_csv.csv thành công:")
    # print(df_kynghi.head())
except FileNotFoundError:
    print("Không tìm thấy file KyNghi.csv")

"""---------
# 2. Tiền xử lý dữ liệu
"""

# --- Kiểm tra df_chiphi ---
print("--- df_chiphi ---")
print("Thông tin chung:")
df_chiphi.info()
print("\nSố lượng giá trị thiếu:")
print(df_chiphi.isnull().sum())
print("\nSố lượng dòng trùng lặp:")
print(df_chiphi.duplicated().sum())

# --- Kiểm tra df_banhang ---
print("\n--- df_banhang ---")
print("Thông tin chung:")
df_banhang.info()
print("\nSố lượng giá trị thiếu:")
print(df_banhang.isnull().sum())
print("\nSố lượng dòng trùng lặp:")
print(df_banhang.duplicated().sum())

# --- Kiểm tra df_giaban ---
print("\n--- df_giaban ---")
print("Thông tin chung:")
df_giaban.info()
print("\nSố lượng giá trị thiếu:")
print(df_giaban.isnull().sum())
print("\nSố lượng dòng trùng lặp:")
print(df_giaban.duplicated().sum())

# --- Kiểm tra df_kynghi ---
print("\n--- df_kynghi ---")
print("Thông tin chung:")
df_kynghi.info()
print("\nSố lượng giá trị thiếu:")
print(df_kynghi.isnull().sum())
print("\nSố lượng dòng trùng lặp:")
print(df_kynghi.duplicated().sum())

# Chuyển đổi cột 'Ngay' sang kiểu datetime trong df_banhang
df_banhang['Ngay'] = pd.to_datetime(df_banhang['Ngay'])
print("\nKiểu dữ liệu mới của cột 'Ngay' trong df_banhang:")
print(df_banhang['Ngay'].dtype)
print(df_banhang.head())

# Chuyển đổi cột 'Ngay Thang' sang kiểu datetime trong df_kynghi
df_kynghi['Ngay Thang'] = pd.to_datetime(df_kynghi['Ngay Thang'])
print("\nKiểu dữ liệu mới của cột 'Ngay Thang' trong df_kynghi:")
print(df_kynghi['Ngay Thang'].dtype)
print(df_kynghi.head())

"""---------
# 3. Ghép (Merge) Dữ liệu
"""

print("\n--- 1. Đang ghép dữ liệu từ các file ---")
df_merged = pd.merge(df_banhang, df_chiphi, left_on='SanPham', right_on='Ma SP', how='left')
# Loại bỏ cột 'Ma SP' trùng lặp sau merge nếu không cần thiết
df_merged = df_merged.drop(columns=['Ma SP_y'], errors='ignore')
df_merged = df_merged.rename(columns={'Ma SP_x': 'Ma SP'}) # Đổi tên lại cột Ma SP gốc nếu nó bị đổi

df_merged = pd.merge(df_merged, df_giaban, left_on='SanPham', right_on='MaSP', how='left')
df_merged = df_merged.drop(columns=['MaSP'], errors='ignore')

df_merged = pd.merge(df_merged, df_kynghi, left_on='Ngay', right_on='Ngay Thang', how='left')
df_merged = df_merged.drop(columns=['Ngay Thang'], errors='ignore')

print("DataFrame sau khi merge:")
print(df_merged.head())
print(f"Kích thước DataFrame sau khi merge: {df_merged.shape}")

"""-------------
# Thống kê
"""

# --- Thống kê mô tả của df_chiphi ---
print("--- Thống kê mô tả của df_chiphi ---")
print(df_chiphi.describe())

# --- Thống kê mô tả của df_banhang ---
print("\n--- Thống kê mô tả của df_banhang ---")
print(df_banhang.describe())

# --- Thống kê mô tả của df_giaban ---
print("\n--- Thống kê mô tả của df_giaban ---")
print(df_giaban.describe())

# --- Thống kê mô tả của df_kynghi ---
print("\n--- Thống kê mô tả của df_kynghi ---")
print(df_kynghi.describe())

"""----------------
# 4. Trực quan hóa dữ liệu (EDA)
"""

import matplotlib.pyplot as plt
import seaborn as sns

print("\n--- 2. Trực quan hóa dữ liệu (EDA) ---")
# --- Trực quan hóa df_chiphi ---
plt.figure(figsize=(10, 6))
sns.histplot(df_chiphi['Gia Ban Du Kien'], kde=True)    # Biểu đồ Histogram
plt.title('Phân phối của Giá Bán Dự Kiến')
plt.xlabel('Giá Bán Dự Kiến')
plt.ylabel('Tần số')
plt.show()

# cols_to_scatter_chiphi = ['Chi Phi Nguyen Lieu', 'Chi Phi Nhan Cong', 'Khuyen Mai(%)', 'Danh Gia(%)']
# for col in cols_to_scatter_chiphi:
#     plt.figure(figsize=(8, 6))
#     sns.scatterplot(x=df_chiphi[col], y=df_chiphi['Gia Ban Du Kien'])   # Biểu đồ Scatter (phân tán)
#     plt.title(f'Mối quan hệ giữa {col} và Giá Bán Dự Kiến')
#     plt.xlabel(col)
#     plt.ylabel('Giá Bán Dự Kiến')
#     plt.show()

# --- Trực quan hóa df_banhang ---
plt.figure(figsize=(10, 6))
sns.histplot(df_banhang['GiaBan'], kde=True)    # Biểu đồ Histogram
plt.title('Phân phối của Giá Bán Thực Tế')
plt.xlabel('Giá Bán Thực Tế')
plt.ylabel('Tần số')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(df_banhang['SoLuongBan'], kde=True)    # Biểu đồ Histogram
plt.title('Phân phối của Số Lượng Bán')
plt.xlabel('Số Lượng Bán')
plt.ylabel('Tần số')
plt.show()

# plt.figure(figsize=(12, 6))
# sns.lineplot(x='Ngay', y='SoLuongBan', data=df_banhang)  # Biểu đồ đường
# plt.title('Số Lượng Bán theo Thời Gian')
# plt.xlabel('Ngày')
# plt.ylabel('Số Lượng Bán')
# plt.show()

# plt.figure(figsize=(12, 6))
# sns.lineplot(x='Ngay', y='GiaBan', data=df_banhang)    # Biểu đồ đường
# plt.title('Giá Bán theo Thời Gian')
# plt.xlabel('Ngày')
# plt.ylabel('Giá Bán')
# plt.show()

# # --- Trực quan hóa df_giaban ---
# num_cols_to_plot = 5
# random_cols = ['GiaBanCuaHang 1', 'GiaBanCuaHang 50', 'GiaBanCuaHang 100', 'GiaBanCuaHang 150', 'GiaBanCuaHang 200']
# plt.figure(figsize=(12, 7))
# sns.boxplot(data=df_giaban[random_cols])    # Biểu đồ Boxplot (hộp)
# plt.title(f'So sánh giá bán ở một số cửa hàng ngẫu nhiên')
# plt.ylabel('Giá Bán')
# plt.xlabel('Cửa Hàng')
# plt.show()

# # --- Trực quan hóa df_kynghi ---
# plt.figure(figsize=(8, 6))
# sns.boxplot(x='Cuoi tuan', y='Nhiet do TB', data=df_kynghi)   # Biểu đồ Boxplot (hộp)
# plt.title('Nhiệt độ trung bình vào cuối tuần và ngày thường')
# plt.xlabel('Cuối tuần (0: Không, 1: Có)')
# plt.ylabel('Nhiệt độ trung bình')
# plt.show()

# plt.figure(figsize=(8, 6))
# sns.boxplot(x='Nghi hoc', y='Ngoai troi', data=df_kynghi)   # Biểu đồ Boxplot (hộp)
# plt.title('Yếu tố ngoài trời vào ngày nghỉ học và ngày thường')
# plt.xlabel('Nghỉ học (0: Không, 1: Có)')
# plt.ylabel('Yếu tố ngoài trời')
# plt.show()

"""--------------------
# 5. Chọn Đặc trưng và Biến Mục tiêu (cho mô hình dự đoán GiaBan)
"""

print("\n--- 3. Chọn đặc trưng và biến mục tiêu ---")
features = ['Chi Phi Nguyen Lieu', 'Chi Phi Nhan Cong', 'Chi Phi Van Hanh', 'Tong Chi Phi', 'Khuyen Mai(%)', 'Danh Gia(%)']
target = 'GiaBan' # Mục tiêu là dự đoán giá bán thực tế

X = df_merged[features]
y = df_merged[target]

"""-------
# 6. Xử lý NaN trong các cột đã chọn (Kiểm tra lại, thường thì đã sạch sau merge)
"""

print("\n--- 4. Kiểm tra và xử lý NaN ---")
print("Số lượng NaN trong các đặc trưng:")
print(X.isnull().sum())
print("\nSố lượng NaN trong biến mục tiêu:")
print(y.isnull().sum())
# Nếu có NaN, bạn có thể thêm: X.fillna(X.mean(), inplace=True) hoặc X.dropna(inplace=True)
# Nhưng với dữ liệu này thì không cần vì đã sạch.

"""-------------------
# 7. Chia dữ liệu thành tập huấn luyện và tập kiểm tra
"""

print("\n--- 5. Chia dữ liệu thành tập huấn luyện và tập kiểm tra ---")
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f"Kích thước tập huấn luyện: {X_train.shape}")
print(f"Kích thước tập kiểm tra: {X_test.shape}")

"""------------
# 8. Huấn luyện Mô hình Hồi quy Tuyến tính
"""

print("\n--- 6. Huấn luyện mô hình hồi quy tuyến tính ---")
model = LinearRegression()
model.fit(X_train, y_train)
print("Mô hình đã được huấn luyện.")

"""----------
# 9. Đánh giá Mô hình
"""

print("\n--- 7. Đánh giá mô hình ---")
y_pred_test = model.predict(X_test) # Đặt tên biến khác để tránh nhầm lẫn với y_pred_all_products

mse = mean_squared_error(y_test, y_pred_test)
r2 = r2_score(y_test, y_pred_test)

print("Mean Squared Error (MSE) trên tập kiểm tra:", mse)
print("R-squared (R2) trên tập kiểm tra:", r2)

print("\nHệ số hồi quy (coefficients):")
for feature, coef in zip(features, model.coef_):
    print(f"{feature}: {coef}")
print("\nIntercept:", model.intercept_)

# Kiểm định chéo
print("\n--- Kết quả kiểm định chéo (Cross-Validation) ---")
model_cv = LinearRegression()
mse_scores = cross_val_score(model_cv, X, y, cv=5, scoring='neg_mean_squared_error')
mean_mse_cv = -mse_scores.mean()
r2_scores = cross_val_score(model_cv, X, y, cv=5, scoring='r2')
mean_r2_cv = r2_scores.mean()

print(f"Mean MSE (Cross-Validation): {mean_mse_cv}")
print(f"Mean R-squared (Cross-Validation): {mean_r2_cv}")

"""---------------
# 10.  Dự đoán giá cho 18 SP (SP01 đến SP18) và xuất file
"""

print("\n--- 8. Dự đoán giá cho 18 sản phẩm và xuất file ---")

# 1. Tạo DataFrame df_ten_sp từ dữ liệu cung cấp (ví dụ)
data_ten_sp = {
    'Ma SP': ['SP01', 'SP02', 'SP03', 'SP04', 'SP05', 'SP06', 'SP07', 'SP08', 'SP09', 'SP10',
              'SP11', 'SP12', 'SP13', 'SP14', 'SP15', 'SP16', 'SP17', 'SP18'],
    'Ten SP': ['Cafe sữa', 'Cafe đen', 'Cafe trứng', 'Latte', 'Latte matcha', 'Mocha', 'Cappuccino',
               'Sữa chua', 'Sữa chua đá', 'Trà xanh', 'Trà đào', 'Trà chanh', 'Sinh tố',
               'Nước ép trái cây', 'Nước ngọt', 'Bánh ngọt', 'Bánh mì', 'Bánh Cheesecake']
}
df_ten_sp = pd.DataFrame(data_ten_sp)


# Lấy các đặc trưng từ df_chiphi tương ứng với 18 SP để dự đoán
# Đảm bảo các cột trong df_chiphi['Ma Loai'] và df_chiphi['Ma SP'] khớp với dữ liệu bạn có.
X_predict_18_sp = df_chiphi[features]


# Dự đoán giá cho từng sản phẩm (18 SP)
gia_du_doan_18_sp = model.predict(X_predict_18_sp)

# Tạo DataFrame để hiển thị Ma Loai SP, Ma SP, Ten SP và giá dự đoán
df_gia_du_doan_final = pd.DataFrame({
    'ma_loai_sp': df_chiphi['Ma Loai'],
    'ma_sp': df_chiphi['Ma SP'],
    'gia_du_doan': gia_du_doan_18_sp
})

# Merge df_gia_du_doan_final với df_ten_sp để thêm cột Ten SP
df_gia_du_doan_final = pd.merge(df_gia_du_doan_final, df_ten_sp, left_on='ma_sp', right_on='Ma SP', how='left')

# Loại bỏ cột 'Ma SP' trùng lặp từ df_ten_sp sau khi merge
df_gia_du_doan_final = df_gia_du_doan_final.drop(columns=['Ma SP'])
# Đổi tên cột 'Ten SP' thành 'ten_sp' để không dấu
df_gia_du_doan_final = df_gia_du_doan_final.rename(columns={'Ten SP': 'ten_sp'})


print("Giá dự đoán cho từng sản phẩm (theo Mã Sản phẩm):")
print(df_gia_du_doan_final)

# Xuất ra file CSV
df_gia_du_doan_final.to_csv('gia_du_doan_sp.csv', index=False)
print("\nĐã xuất giá dự đoán ra file gia_du_doan_sp.csv")

# Xuất ra file SQL (.sql)
with open('gia_du_doan_sp.sql', 'w', encoding='utf-8') as f:
    f.write('''
CREATE TABLE IF NOT EXISTS gia_du_doan (
    ma_loai_sp INTEGER,
    ma_sp TEXT,
    ten_sp TEXT,
    gia_du_doan REAL
);
DELETE FROM gia_du_doan;
''')
    for index, row in df_gia_du_doan_final.iterrows():
        escaped_ten_sp = str(row['ten_sp']).replace("'", "''") # Đảm bảo là string và thoát ký tự '
        f.write(f"INSERT INTO gia_du_doan VALUES ({row['ma_loai_sp']}, '{row['ma_sp']}', '{escaped_ten_sp}', {row['gia_du_doan']});\n")

print("Đã xuất giá dự đoán ra file gia_du_doan_sp.sql")

# # Xuất ra file SQLite (.db)
# conn = sqlite3.connect('gia_du_doan_sp.db')
# cursor = conn.cursor()

# cursor.execute('''
#     CREATE TABLE IF NOT EXISTS gia_du_doan (
#         ma_loai_sp INTEGER,
#         ma_sp TEXT,
#         ten_sp TEXT,
#         gia_du_doan REAL
#     )
# ''')
# cursor.execute("DELETE FROM gia_du_doan")

# for index, row in df_gia_du_doan_final.iterrows():
#     cursor.execute("INSERT INTO gia_du_doan VALUES (?, ?, ?, ?)",
#                    (row['ma_loai_sp'], row['ma_sp'], row['ten_sp'], row['gia_du_doan']))

# conn.commit()
# conn.close()

# print("Đã xuất giá dự đoán ra database gia_du_doan_sp.db")