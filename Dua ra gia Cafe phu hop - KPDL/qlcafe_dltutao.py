# -*- coding: utf-8 -*-
"""QlCafe_DLTuTao.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pPh3aaPlLvBNpWQhGLyYN8-YbtVF5Xnu

-------------
# Đọc các file
"""
import sqlite3
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Đọc file ChiPhiSPDuKien.csv
try:
    df_chiphi = pd.read_csv('ChiPhiSPDuKien_csv.csv')
    print("Đã đọc file ChiPhiSPDuKien_csv.csv thành công:")
    # print(df_chiphi.head())
except FileNotFoundError:
    print("Không tìm thấy file ChiPhiSPDuKien_csv.csv")

# Đọc file DuLieuBanHang.csv
try:
    df_banhang = pd.read_csv('DuLieuBanHang_csv.csv')
    print("\nĐã đọc file DuLieuBanHang_csv.csv thành công:")
    # print(df_banhang.head())
except FileNotFoundError:
    print("Không tìm thấy file DuLieuBanHang_csv.csv")

# Đọc file GiaBanCua1SoCuaHang.csv
try:
    df_giaban = pd.read_csv('GiaBanCua1SoCuaHang_csv.csv')
    print("\nĐã đọc file GiaBanCua1SoCuaHang_csv.csv thành công:")
    # print(df_giaban.head())
except FileNotFoundError:
    print("Không tìm thấy file GiaBanCua1SoCuaHang_csv.csv")

# Đọc file KyNghi.csv
try:
    df_kynghi = pd.read_csv('KyNghi.csv')
    print("\nĐã đọc file KyNghi_csv.csv thành công:")
    # print(df_kynghi.head())
except FileNotFoundError:
    print("Không tìm thấy file KyNghi.csv")

"""---------------
# Tiền xử lý dữ liệu
"""

# --- Kiểm tra df_chiphi ---
print("--- df_chiphi ---")
print("Thông tin chung:")
df_chiphi.info()
print("\nSố lượng giá trị thiếu:")
print(df_chiphi.isnull().sum())
print("\nSố lượng dòng trùng lặp:")
print(df_chiphi.duplicated().sum())

# --- Kiểm tra df_banhang ---
print("\n--- df_banhang ---")
print("Thông tin chung:")
df_banhang.info()
print("\nSố lượng giá trị thiếu:")
print(df_banhang.isnull().sum())
print("\nSố lượng dòng trùng lặp:")
print(df_banhang.duplicated().sum())

# --- Kiểm tra df_giaban ---
print("\n--- df_giaban ---")
print("Thông tin chung:")
df_giaban.info()
print("\nSố lượng giá trị thiếu:")
print(df_giaban.isnull().sum())
print("\nSố lượng dòng trùng lặp:")
print(df_giaban.duplicated().sum())

# --- Kiểm tra df_kynghi ---
print("\n--- df_kynghi ---")
print("Thông tin chung:")
df_kynghi.info()
print("\nSố lượng giá trị thiếu:")
print(df_kynghi.isnull().sum())
print("\nSố lượng dòng trùng lặp:")
print(df_kynghi.duplicated().sum())

""" - In ra kiểu dữ liệu của từng cột trong mỗi DataFrame:"""

print("--- Kiểu dữ liệu của df_chiphi ---")
print(df_chiphi.dtypes)

print("\n--- Kiểu dữ liệu của df_banhang ---")
print(df_banhang.dtypes)

print("\n--- Kiểu dữ liệu của df_giaban ---")
print(df_giaban.dtypes)

print("\n--- Kiểu dữ liệu của df_kynghi ---")
print(df_kynghi.dtypes)

"""- Chuyển đổi cột Ngay trong df_banhang và cột Ngay Thang trong df_kynghi sang kiểu datetime."""

# Chuyển đổi cột 'Ngay' sang kiểu datetime trong df_banhang
df_banhang['Ngay'] = pd.to_datetime(df_banhang['Ngay'])
print("\nKiểu dữ liệu mới của cột 'Ngay' trong df_banhang:")
print(df_banhang['Ngay'].dtype)
print(df_banhang.head())

# Chuyển đổi cột 'Ngay Thang' sang kiểu datetime trong df_kynghi
df_kynghi['Ngay Thang'] = pd.to_datetime(df_kynghi['Ngay Thang'])
print("\nKiểu dữ liệu mới của cột 'Ngay Thang' trong df_kynghi:")
print(df_kynghi['Ngay Thang'].dtype)
print(df_kynghi.head())

"""- Thống kê mô tả cho tất cả 4 DataFrame"""

# --- Thống kê mô tả của df_chiphi ---
print("--- Thống kê mô tả của df_chiphi ---")
print(df_chiphi.describe())

# --- Thống kê mô tả của df_banhang ---
print("\n--- Thống kê mô tả của df_banhang ---")
print(df_banhang.describe())

# --- Thống kê mô tả của df_giaban ---
print("\n--- Thống kê mô tả của df_giaban ---")
print(df_giaban.describe())

# --- Thống kê mô tả của df_kynghi ---
print("\n--- Thống kê mô tả của df_kynghi ---")
print(df_kynghi.describe())

"""- Trực quan hóa dữ liệu"""


# --- Trực quan hóa df_chiphi ---
plt.figure(figsize=(10, 6))
sns.histplot(df_chiphi['Gia Ban Du Kien'], kde=True)
plt.title('Phân phối của Giá Bán Dự Kiến')
plt.xlabel('Giá Bán Dự Kiến')
plt.ylabel('Tần số')
plt.show()

cols_to_scatter_chiphi = ['Chi Phi Nguyen Lieu', 'Chi Phi Nhan Cong', 'Khuyen Mai(%)', 'Danh Gia(%)']
for col in cols_to_scatter_chiphi:
    plt.figure(figsize=(8, 6))
    sns.scatterplot(x=df_chiphi[col], y=df_chiphi['Gia Ban Du Kien'])
    plt.title(f'Mối quan hệ giữa {col} và Giá Bán Dự Kiến')
    plt.xlabel(col)
    plt.ylabel('Giá Bán Dự Kiến')
    plt.show()

# --- Trực quan hóa df_banhang ---
plt.figure(figsize=(10, 6))
sns.histplot(df_banhang['GiaBan'], kde=True)
plt.title('Phân phối của Giá Bán Thực Tế')
plt.xlabel('Giá Bán Thực Tế')
plt.ylabel('Tần số')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(df_banhang['SoLuongBan'], kde=True)
plt.title('Phân phối của Số Lượng Bán')
plt.xlabel('Số Lượng Bán')
plt.ylabel('Tần số')
plt.show()

plt.figure(figsize=(12, 6))
sns.lineplot(x='Ngay', y='SoLuongBan', data=df_banhang)
plt.title('Số Lượng Bán theo Thời Gian')
plt.xlabel('Ngày')
plt.ylabel('Số Lượng Bán')
plt.show()

plt.figure(figsize=(12, 6))
sns.lineplot(x='Ngay', y='GiaBan', data=df_banhang)
plt.title('Giá Bán theo Thời Gian')
plt.xlabel('Ngày')
plt.ylabel('Giá Bán')
plt.show()

# --- Trực quan hóa df_giaban ---
num_cols_to_plot = 5
random_cols = ['GiaBanCuaHang 1', 'GiaBanCuaHang 50', 'GiaBanCuaHang 100', 'GiaBanCuaHang 150', 'GiaBanCuaHang 200']
plt.figure(figsize=(12, 7))
sns.boxplot(data=df_giaban[random_cols])
plt.title(f'So sánh giá bán ở một số cửa hàng ngẫu nhiên')
plt.ylabel('Giá Bán')
plt.xlabel('Cửa Hàng')
plt.show()

# --- Trực quan hóa df_kynghi ---
plt.figure(figsize=(8, 6))
sns.boxplot(x='Cuoi tuan', y='Nhiet do TB', data=df_kynghi)
plt.title('Nhiệt độ trung bình vào cuối tuần và ngày thường')
plt.xlabel('Cuối tuần (0: Không, 1: Có)')
plt.ylabel('Nhiệt độ trung bình')
plt.show()

plt.figure(figsize=(8, 6))
sns.boxplot(x='Nghi hoc', y='Ngoai troi', data=df_kynghi)
plt.title('Yếu tố ngoài trời vào ngày nghỉ học và ngày thường')
plt.xlabel('Nghỉ học (0: Không, 1: Có)')
plt.ylabel('Yếu tố ngoài trời')
plt.show()

"""- Xây dựng mô hình hồi quy tuyến tính để dự đoán Gia Ban Du Kien dựa trên các thuộc tính số có trong df_chiphi"""


# 1. Chọn đặc trưng và biến mục tiêu
features = ['Chi Phi Nguyen Lieu', 'Chi Phi Nhan Cong', 'Chi Phi Van Hanh', 'Khuyen Mai(%)', 'Danh Gia(%)']
target = 'Gia Ban Du Kien'
X = df_chiphi[features]
y = df_chiphi[target]

# 2. Chia dữ liệu thành tập huấn luyện và tập kiểm tra
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 3. Huấn luyện mô hình hồi quy tuyến tính
model = LinearRegression()
model.fit(X_train, y_train)

# 4. Đánh giá mô hình trên tập kiểm tra
y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error (MSE):", mse)
print("R-squared (R2):", r2)

# In ra các hệ số của mô hình
print("\nHệ số hồi quy (coefficients):")
for feature, coef in zip(features, model.coef_):
    print(f"{feature}: {coef}")
print("\nIntercept:", model.intercept_)

"""- Sử dụng phương pháp kiểm định chéo (cross-validation) để đánh giá hiệu suất của mô hình hồi quy tuyến tính một cách khách quan hơn. Chúng ta sẽ sử dụng K-fold cross-validation với, ví dụ, 5 folds."""


# Khởi tạo mô hình hồi quy tuyến tính
model_cv = LinearRegression()

# Thực hiện kiểm định chéo với 5 folds, sử dụng MSE làm metric đánh giá (chúng ta muốn giá trị âm của MSE vì cross_val_score cố gắng tối đa hóa score)
mse_scores = cross_val_score(model_cv, X, y, cv=5, scoring='neg_mean_squared_error')

# Tính giá trị MSE trung bình
mean_mse = -mse_scores.mean()

# Thực hiện kiểm định chéo cho R-squared
r2_scores = cross_val_score(model_cv, X, y, cv=5, scoring='r2')
mean_r2 = r2_scores.mean()

print("Kết quả kiểm định chéo:")
print(f"Mean MSE (Cross-Validation): {mean_mse}")
print(f"Mean R-squared (Cross-Validation): {mean_r2}")

"""- Kết hợp dữ liệu - Merge df_banhang với df_chiphi dựa trên Ma SP (cột SanPham trong df_banhang tương ứng với Ma SP trong df_chiphi)."""

df_merged = pd.merge(df_banhang, df_chiphi, left_on='SanPham', right_on='Ma SP', how='left')
print("DataFrame sau khi merge df_banhang và df_chiphi:")
print(df_merged.head())

"""- Merge DataFrame kết quả này với df_giaban cũng dựa trên mã sản phẩm (SanPham hoặc Ma SP)."""

df_merged = pd.merge(df_merged, df_giaban, left_on='SanPham', right_on='MaSP', how='left')
print("\nDataFrame sau khi merge với df_giaban:")
print(df_merged.head())

"""- Merge với df_kynghi dựa trên cột Ngay từ df_merged và cột Ngay Thang từ df_kynghi."""

df_merged = pd.merge(df_merged, df_kynghi, left_on='Ngay', right_on='Ngay Thang', how='left')
print("\nDataFrame sau khi merge với df_kynghi:")
print(df_merged.head())

"""- Chọn các cột đặc trưng và mục tiêu.

Các đặc trưng: Chi Phi Nguyen Lieu, Chi Phi Nhan Cong, Chi Phi Van Hanh, Tong Chi Phi, Khuyen Mai(%), Danh Gia(%).

Biến mục tiêu: GiaBan.
"""

features = ['Chi Phi Nguyen Lieu', 'Chi Phi Nhan Cong', 'Chi Phi Van Hanh', 'Tong Chi Phi', 'Khuyen Mai(%)', 'Danh Gia(%)']
target = 'GiaBan'
X = df_merged[features]
y = df_merged[target]

"""- Kiểm tra và xử lý giá trị NaN trong các cột"""

print("Số lượng NaN trong các đặc trưng:")
print(X.isnull().sum())
print("\nSố lượng NaN trong biến mục tiêu:")
print(y.isnull().sum())

"""- Chia dữ liệu thành tập huấn luyện và tập kiểm tra."""


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f"Kích thước tập huấn luyện: {X_train.shape}")
print(f"Kích thước tập kiểm tra: {X_test.shape}")

"""- Huấn luyện mô hình hồi quy tuyến tính."""

from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(X_train, y_train)

print("\nMô hình đã được huấn luyện.")

# Lấy các đặc trưng từ df_chiphi tương ứng với các features đã dùng để huấn luyện
X_predict = df_chiphi[features]

# Dự đoán giá cho từng sản phẩm
predicted_prices = model.predict(X_predict)

# Tạo DataFrame để hiển thị Ma SP và giá dự đoán
predictions_df = pd.DataFrame({'Ma SP': df_chiphi['Ma SP'], 'Giá dự đoán': predicted_prices})

print("Giá dự đoán cho từng sản phẩm (theo Ma SP):")
print(predictions_df)

# Lấy các đặc trưng từ df_chiphi tương ứng với các features đã dùng để huấn luyện
X_predict = df_chiphi[features]

# Dự đoán giá cho từng sản phẩm
gia_du_doan = model.predict(X_predict)

# Tạo DataFrame để hiển thị Ma Loai SP, Ma SP và giá dự đoán
df_gia_du_doan = pd.DataFrame({
    'ma_loai_sp': df_chiphi['Ma Loai'],
    'ma_sp': df_chiphi['Ma SP'],
    'gia_du_doan': gia_du_doan
})

print("Gia du doan cho tung san pham (theo Ma Loai SP va Ma SP):")
print(df_gia_du_doan)

# Xuất ra file CSV
df_gia_du_doan.to_csv('gia_du_doan_sp.csv', index=False)
print("\nDa xuat gia du doan ra file gia_du_doan_sp.csv")

# Xuất ra file SQL (.sql)
with open('gia_du_doan_sp.sql', 'w') as f:
    f.write('''
CREATE TABLE IF NOT EXISTS gia_du_doan (
    ma_loai_sp INTEGER,
    ma_sp TEXT,
    gia_du_doan REAL
);
DELETE FROM gia_du_doan;
''')
    for index, row in df_gia_du_doan.iterrows():
        f.write(f"INSERT INTO gia_du_doan VALUES ({row['ma_loai_sp']}, '{row['ma_sp']}', {row['gia_du_doan']});\n")

print("Da xuat gia du doan ra file gia_du_doan_sp.sql")

# Xuất ra file SQLite (.db)


conn = sqlite3.connect('gia_du_doan_sp.db')
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS gia_du_doan (
        ma_loai_sp INTEGER,
        ma_sp TEXT,
        gia_du_doan REAL
    )
''')
cursor.execute("DELETE FROM gia_du_doan")

for index, row in df_gia_du_doan.iterrows():
    cursor.execute("INSERT INTO gia_du_doan VALUES (?, ?, ?)",
                   (row['ma_loai_sp'], row['ma_sp'], row['gia_du_doan']))

conn.commit()
conn.close()

print("Da xuat gia du doan ra database gia_du_doan_sp.db")











